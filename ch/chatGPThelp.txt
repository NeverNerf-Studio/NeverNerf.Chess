##Context##
Given this Quasar vue app:
.
├── LICENSE
├── README.md
├── ch
│   ├── ch_implement.sh
│   ├── ch_implement.txt
│   ├── chatGPThelp.sh
│   ├── chatGPThelp.txt
│   └── error.txt
├── index.html
├── package.json
├── postcss.config.cjs
├── public
│   ├── NeverNerfLogo.svg
│   ├── chesspieces
│   │   └── wikipedia
│   │       ├── bB.png
│   │       ├── bK.png
│   │       ├── bN.png
│   │       ├── bP.png
│   │       ├── bQ.png
│   │       ├── bR.png
│   │       ├── wB.png
│   │       ├── wK.png
│   │       ├── wN.png
│   │       ├── wP.png
│   │       ├── wQ.png
│   │       └── wR.png
│   ├── favicon.ico
│   ├── imx_metadata
│   └── passport_logo_64px.svg
├── quasar.config.js
├── src
│   ├── App.vue
│   ├── assets
│   │   └── quasar-logo-vertical.svg
│   ├── boot
│   │   ├── axios.ts
│   │   ├── i18n.ts
│   │   └── immutable.ts
│   ├── components
│   │   └── PassportLoginComponent.vue
│   ├── css
│   │   ├── app.scss
│   │   └── quasar.variables.scss
│   ├── env.d.ts
│   ├── i18n
│   │   ├── en-US
│   │   │   └── index.ts
│   │   └── index.ts
│   ├── immutable.ts
│   ├── layouts
│   │   ├── CallbackLayout.vue
│   │   ├── IndexLayout.vue
│   │   ├── LoginLayout.vue
│   │   └── MainLayout.vue
│   ├── pages
│   │   ├── ErrorNotFound.vue
│   │   └── features
│   │       ├── AssetFeature.vue
│   │       ├── AssureFeature.vue
│   │       ├── CraftingFeature.vue
│   │       ├── GameplayFeature.vue
│   │       └── SettingsFeature.vue
│   ├── quasar.d.ts
│   ├── router
│   │   ├── index.ts
│   │   └── routes.ts
│   ├── shims-vue.d.ts
│   └── stores
│       ├── asset-store.ts
│       ├── example-store.ts
│       ├── index.ts
│       ├── passport-store.ts
│       └── store-flag.d.ts
└── tsconfig.json

18 directories, 58 files


And given the below files:

File: package.json
{
  "name": "nevernerf-app",
  "version": "0.0.1",
  "description": "NeverNerf",
  "productName": "NeverNerf_App",
  "author": "sgr_nz",
  "private": true,
  "scripts": {
    "lint": "eslint --ext .js,.ts,.vue ./",
    "format": "prettier --write \"**/*.{js,ts,vue,scss,html,md,json}\" --ignore-path .gitignore",
    "test": "echo \"No test specified\" && exit 0",
    "dev": "quasar dev",
    "build": "quasar build",
    "servebuild": "quasar build -d && cd dist/spa && quasar serve -H localhost -p 9000 -o"
  },
  "dependencies": {
    "@quasar/cli": "^2.3.0",
    "@quasar/extras": "^1.16.4",
    "axios": "^1.2.1",
    "events": "^3.3.0",
    "pinia": "^2.0.11",
    "quasar": "^2.6.0",
    "vue": "^3.0.0",
    "vue-i18n": "^9.2.2",
    "vue-router": "^4.0.0"
  },
  "devDependencies": {
    "@imtbl/sdk": "^0.44.4",
    "@intlify/vite-plugin-vue-i18n": "^3.3.1",
    "@quasar/app-vite": "^1.3.0",
    "@types/node": "^12.20.21",
    "@typescript-eslint/eslint-plugin": "^5.10.0",
    "@typescript-eslint/parser": "^5.10.0",
    "autoprefixer": "^10.4.2",
    "dotenv": "^16.3.1",
    "eslint": "^8.10.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-vue": "^9.0.0",
    "prettier": "^2.5.1",
    "typescript": "^4.5.4"
  },
  "engines": {
    "node": "^20 || ^16 || ^14.19",
    "npm": ">= 6.13.4",
    "yarn": ">= 1.21.1"
  }
}

File: src/pages/features/GameplayFeature.vue
<template>
  <div class="q-my-md text-center">
    <h5>Gameplay</h5>
    <div id="myBoard"></div>
    <!-- Ensure this ID matches your script's target -->
  </div>
</template>

<script>
import { onMounted, computed } from 'vue';
import { useRoute } from 'vue-router';
import { useAssetStore } from 'src/stores/asset-store';

export default {
  name: 'NeverNerfChessboard',
  setup() {
    const token_id = computed(() => useRoute().params.token_id);
    const assetStore = useAssetStore();
  },
  mounted() {
    //TODO this seems gross
    this.loadjQuery();
    this.loadChessCSS();
    this.loadChessboardScript();
    assetStore.loadMetadata(token_id.value);
  },
  methods: {
    loadjQuery() {
      const script = document.createElement('script');
      script.src = 'https://code.jquery.com/jquery-3.5.1.min.js';
      script.integrity =
        'sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2';
      script.crossOrigin = 'anonymous';
      document.head.appendChild(script);
    },
    loadChessCSS() {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href =
        'https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.css';
      link.integrity =
        'sha384-q94+BZtLrkL1/ohfjR8c6L+A6qzNH9R2hBLwyoAfu3i/WCvQjzL2RQJ3uNHDISdU';
      link.crossOrigin = 'anonymous';
      document.head.appendChild(link);
    },
    loadChessboardScript() {
      const script = document.createElement('script');
      script.src =
        'https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js';
      script.integrity =
        'sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD';
      script.crossOrigin = 'anonymous';
      script.onload = () => this.initializeChessboard();
      document.head.appendChild(script);
    },
    initializeChessboard() {
      function pieceTheme(piece) {
        // wikipedia theme
        return '/chesspieces/wikipedia/' + piece + '.png';
      }

      var config = {
        pieceTheme: pieceTheme,
        position: assetStore.imx.metadata.FEN,
      };

      //TODO another sign this implementation is messy
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      var board = Chessboard('myBoard', config);
    },
  },
};
</script>

File: src/pages/features/AssetFeature.vue
<template>
  <div v-if="asset?.imx?.metadata" class="q-pa-md">
    <q-img
      :src="asset.standardValues.hero_image"
      class="rounded-borders q-mx-auto row justify-between"
      style="max-height: 50vh; max-width: 50vh" />

    <div class="q-my-md text-center">
      <div class="text-h5 q-my-md">{{ asset.imx.metadata.name }}</div>
      <div class="text-subtitle2 q-my-md">{{ asset.imx.metadata.tagline }}</div>

      <q-list>
        <q-item
          v-for="(value, key) in filteredMetadata"
          :key="key"
          class="row justify-between">
          <q-item-section>{{ key }}:</q-item-section>
          <q-item-section>{{ value }}</q-item-section>
        </q-item>
      </q-list>
    </div>

    <q-expansion-item icon="data_object" label="All Metadata" dense>
      <div v-for="(value, key) in asset.imx" :key="key">
        <div v-if="isObjectType(value)">
          <div class="text-subtitle1 q-my-md">{{ key }}</div>
          <q-separator />
          <div v-for="(nestedValue, nestedKey) in value" :key="nestedKey">
            <q-item class="q-py-xs">
              <q-item-section>{{ nestedKey }}:</q-item-section>
              <q-item-section>{{ formatValue(nestedValue) }}</q-item-section>
              <q-item-section side>
                <q-btn
                  icon="content_copy"
                  @click="copyToClipboard(nestedValue)"
                  flat
                  dense />
              </q-item-section>
            </q-item>
          </div>
        </div>
        <div v-else>
          <q-item class="q-py-xs">
            <q-item-section>{{ key }}:</q-item-section>
            <q-item-section>{{ formatValue(value) }}</q-item-section>
            <q-item-section side>
              <q-btn
                icon="content_copy"
                @click="copyToClipboard(value)"
                flat
                dense />
            </q-item-section>
          </q-item>
        </div>
      </div>
    </q-expansion-item>
  </div>
  <div v-else class="text-h6 text-center q-my-md">Loading...</div>
</template>

<script setup>
import { onMounted, computed } from 'vue';
import { useAssetStore } from 'src/stores/asset-store';
import { useRoute } from 'vue-router';

const asset = computed(() => assetStore);
const token_id = computed(() => useRoute().params.token_id);
const assetStore = useAssetStore();
onMounted(() => {
  assetStore.loadMetadata(token_id.value);
});

const filteredMetadata = computed(() => {
  // Check if asset is not loaded or is undefined/null
  if (!asset.value || asset.value.loading) {
    // Return an empty object or any other default value
    return {};
  }
  const keysToInclude = [
    'class',
    'series',
    'element',
    'faction',
    'rarityStr',
    'specialEditionStr',
  ];
  const metadata = asset.value.imx.metadata;
  return keysToInclude.reduce((filtered, key) => {
    if (metadata[key] !== undefined) {
      filtered[key] = metadata[key];
    }
    return filtered;
  }, {});
});

const truncateText = (text) => {
  if (typeof text === 'string' && text.length > 20) {
    return text.substr(0, 5) + '...' + text.substr(-5);
  }
  return text;
};

const formatValue = (value) => {
  if (typeof value === 'object') {
    return JSON.stringify(value, null, 2);
  }
  return truncateText(value);
};

const isObjectType = (value) => {
  return value !== null && typeof value === 'object' && !Array.isArray(value);
};

const copyToClipboard = (text) => {
  navigator.clipboard.writeText(text);
};
</script>

<style scoped>
.rounded-borders {
  border-radius: 4px;
}
</style>


##Task##
Refactor GameplayFeature.vue to use the same sytax (e.g. setup()) and best practices as AssetFeature.vue, fix any errors if present.

##Instructions##
As a world class full stack Quasar developer:
The project is written in TypeScript, avoid eslint issues e.g. Unexpected any. Specify a different type.eslint@typescript-eslint/no-explicit-any
Your task is to think step by step and provide specific code changes that are production ready.
You will be penalized if you skip steps, add placeholders or TODOs for other developers.
If that's not possible then you MUST write code that will test and provide you additional information needed to understand the problem better.
I'm going to tip $400 for a better solution!
